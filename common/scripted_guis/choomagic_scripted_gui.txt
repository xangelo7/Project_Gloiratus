#mechanics of targeting provinces
#choosen_province_as_target_for_spell_casting
#choosen_area_as_target_for_spell_casting
#choosen_army_as_target_for_spell_casting
#choosen_char_as_target_for_spell_casting

open_targets_list_provinces_spellcast = {  
	
	scope = country
	
	saved_scopes = {
        current_location_of_the_unit
    }
	
    is_shown = { 
	always = yes
    }
	is_valid = {
    always = yes
    }
	ai_is_valid = {
	always = no
	}
	effect = { 
	
	get_targetable_provinces_casting = yes
	
	
	}
}



#area

open_targets_list_area_spellcast = {  
	
	scope = country
	
	saved_scopes = {
        current_location_of_the_unit
    }
	
    is_shown = { 
	always = yes
    }
	is_valid = {
    always = yes
    }
	ai_is_valid = {
	always = no
	}
	effect = { 
	
	get_targetable_area_casting = yes
	
	
	}
}

#army

open_targets_list_army_spellcast = {  
	
	scope = country
	
	saved_scopes = {
        current_location_of_the_unit
    }
	
    is_shown = { 
	always = yes
    }
	is_valid = {
    always = yes
    }
	ai_is_valid = {
	always = no
	}
	effect = { 
	
	get_targetable_armies_casting = yes
	
	
	}
}

we_are_this_unit_sir = {  
	
	scope = unit
	
	saved_scopes = {
        player
		current_unit
    }
	
    is_shown = { 
	root = scope:current_unit 
    }
}

#character

open_targets_list_character_spellcast = {  
	
	scope = country
	
	saved_scopes = {
        current_location_of_the_unit
    }
	
    is_shown = { 
	always = yes
    }
	is_valid = {
    always = yes
    }
	ai_is_valid = {
	always = no
	}
	effect = { 
	
	get_targetable_characters_casting = yes
	
	
	}
}


#spells
#impresive growth, province targetable cast
spell_cast_impressive_growth = {  
	
	scope = province
	
	saved_scopes = {
		player
		unit_commander
		current_unit
    }
	
    is_shown = { 
	#its shown only when target is choosen its easier to avoid validator errors this way

    }
	is_valid = {
	#just for sure to not let it gone wild


	#is spell land or sea or both castable
	is_sea = no 
	
	#range of the spell cast this one is can work for all neighbor provinces and whole area
	custom_tooltip = {
	text = TARGET_IS_IN_RANGE_OF_CASTER_TOOLTIP
	OR = {
	is_in_area = scope:current_unit.unit_location
	is_neighbor = scope:current_unit.unit_location
	}
	}
	

	#is player able to pay the mana price?#is variable set if not something gone wrong and it has to be set again
	scope:player = {
	has_variable = magic_influx
	var:magic_influx >= 4
	}
	#who is able to cast the spell, can regular mage cast it or is it need to be casted by someone more powerfull
	scope:current_unit = {
			OR = {
			any_sub_unit = { sub_unit_type = mages }
			#this spell is so simple that it can be casted by a bunch of normal mages
			trigger_if = { 
				limit = { has_commander = yes } 
					scope:unit_commander = { 
					OR = {
					has_trait = cleric_trait
					#has_trait = paladin_trait
					has_trait = archmage_trait
					has_trait = mage_trait
					has_trait = warlock_trait #its easy spell so warlocks can cast it even if its beyond their magic specialisation
					has_trait = high_mage_trait
					has_trait = sorcerer_trait #as in warlock
					has_trait = druid_trait
						}
					} 
				}
			}
	#requirements end
	
	}
	}
	ai_is_valid = {
	#
	always = no
	#well it may need some complicated callculation i dont know weather ai will be able to determinate is target worth beeing nuked for e.g this one will be simpler though if ai has lot of spare mana it will use it too boost provinces
	
	}
	
	
	
	effect = {
	custom_tooltip = CASTS_IMPRESIVE_FERTALITY
	
	scope:player = {
	change_variable = { name = magic_influx subtract = 4 }
	}
	
	add_province_modifier = { name = impressive_growth_spell duration = 3650 }
     
	}
}

#Overcast of spell
#overcast is way to make some spells stronger some spells cant be overcasted some are overcasted by default because of their dificulty and power needed to be casted
spell_cast_impressive_growth_overcast = {  
	
	scope = province
	
	saved_scopes = {
		player
		unit_commander
		current_unit
    }
	
    is_shown = { 
	#its shown only when target is choosen its easier to avoid validator errors this way
    }
	is_valid = {
	#just for sure to not let it gone wild
	
	
	#is spell land or sea or both castable
	is_sea = no 
	
	#range of the spell cast this one is can work for all neighbor provinces and whole area
	OR = {
	is_in_area = scope:current_unit.unit_location
	is_neighbor = scope:current_unit.unit_location
	}
	#i dont rly know do triggers from the custom tooltip part works so i did it twice it may be reundant(ill probably check that out later is more of a note to mysaelf not for the documentation i guess)
	custom_tooltip = {
	text = TARGET_IS_IN_RANGE_OF_CASTER_TOOLTIP
	OR = {
	is_in_area = scope:current_unit.unit_location
	is_neighbor = scope:current_unit.unit_location
	}
	}
	
	

	#is player able to pay the mana price?#is variable set if not something gone wrong and it has to be set again
	scope:player = {
	has_variable = magic_influx
	var:magic_influx >= 12
	}
	#who is able to cast the spell, can regular mage cast it or is it need to be casted by someone more powerfull
	scope:current_unit = {
			OR = {
			any_sub_unit = { sub_unit_type = mages }
			#this spell is so simple that it can be casted by a bunch of normal mages
			trigger_if = { 
				limit = { has_commander = yes } 
					scope:unit_commander = { 
					OR = {
					has_trait = cleric_trait
					#has_trait = paladin_trait
					has_trait = archmage_trait
					has_trait = mage_trait
					has_trait = warlock_trait #its easy spell so warlocks can cast it even if its beyond their magic specialisation
					has_trait = high_mage_trait
					has_trait = sorcerer_trait #as in warlock
					has_trait = druid_trait
						}
					} 
				}
			}
	#requirements end
	
	}
	}
	ai_is_valid = {
	#
	always = no
	#well it may need some complicated callculation i dont know weather ai will be able to determinate is target worth beeing nuked for e.g this one will be simpler though if ai has lot of spare mana it will use it too boost provinces
	
	}
	
	
	
	effect = {
	custom_tooltip = CASTS_IMPRESIVE_FERTALITY_OC
	
	scope:player = {
	change_variable = { name = magic_influx subtract = 12 }
	}
	
	add_province_modifier = { name = impressive_growth_spell_overcast duration = 3650 }
     
	}
}


#school of nature, self buffs
#nature protects
nature_protects_spell = {  
	
	scope = unit
	
	saved_scopes = {
		player
		unit_commander
		current_unit
    }
	
    is_shown = { 
	OR = {
	unit_owner = scope:player
	unit_owner = { alliance_with = scope:player }
	}
    }
	is_valid = {

	NOT = { has_unit_modifier = nature_protects_buff }
 	
	scope:player = {
	has_variable = magic_influx
	var:magic_influx >= 3
	}
	#range check
	custom_tooltip = {
	text = TARGET_IS_IN_RANGE_OF_CASTER_TOOLTIP
	unit_location = {
	OR = {
	is_in_area = scope:current_unit.unit_location 
	area = { any_neighbor_area = { any_area_province = { this = scope:current_unit.unit_location } } }
	}
	}
	}
	
			OR = {
			any_sub_unit = { sub_unit_type = mages }
			trigger_if = { 
				limit = { has_commander = yes } 
				scope:unit_commander = { 
					OR = {
					has_trait = cleric_trait
					#has_trait = paladin_trait
					has_trait = archmage_trait
					has_trait = mage_trait
					has_trait = warlock_trait 
					has_trait = high_mage_trait
					has_trait = sorcerer_trait
					has_trait = druid_trait #even if druid is able to cast only 2nd tier spells he can cast nature overcasts beyond his tier
						}
					}
				}
			}
	}
	ai_is_valid = {
	always = no
	}
	effect = {
	custom_tooltip = CASTS_BUFF_NATURE_PROTECTS
	
	scope:player = {
	change_variable = { name = magic_influx subtract = 3 }
	}
	
	add_unit_modifier = { name = nature_protects_buff duration = 912 }
    
	
   }

}
#overcast
nature_protects_spell_overcast = {  
	
	scope = unit
	
	saved_scopes = {
		player
		unit_commander
		current_unit
    }
	
    is_shown = { 
		OR = {
	unit_owner = scope:player
	unit_owner = { alliance_with = scope:player }
	}
    }
	is_valid = {

	NOT = { has_unit_modifier = nature_protects_overcast_buff }
 	
	scope:player = {
	has_variable = magic_influx
	var:magic_influx >= 12
	}
	#range check
	custom_tooltip = {
	text = TARGET_IS_IN_RANGE_OF_CASTER_TOOLTIP
	unit_location = {
	OR = {
	is_in_area = scope:current_unit.unit_location 
	area = { any_neighbor_area = { any_area_province = { this = scope:current_unit.unit_location } } }
	}
	}
	}
	
			OR = {
			any_sub_unit = { sub_unit_type = mages }
			trigger_if = { 
				limit = { has_commander = yes } 
				scope:unit_commander = { 
					OR = {
					has_trait = cleric_trait
					#has_trait = paladin_trait
					has_trait = archmage_trait
					has_trait = mage_trait
					#has_trait = warlock_trait 
					has_trait = high_mage_trait
					#has_trait = sorcerer_trait
					has_trait = druid_trait #even if druid is able to cast only 2nd tier spells he can cast nature overcasts beyond his tier
						}
					}
				}
			}
	}
	
	
	
	ai_is_valid = {
	always = no
	}
	effect = {
	custom_tooltip = CASTS_BUFF_NATURE_PROTECTS_OC
	
	scope:player = {
	change_variable = { name = magic_influx subtract = 12 }
	}
	
	add_unit_modifier = { name = nature_protects_overcast_buff duration = 912 }
    
	
   }

}

#bear frenzy
bear_frenzy_spell = {  
	
	scope = unit
	
	saved_scopes = {
		player
		unit_commander
		current_unit
    }
	
    is_shown = { 
		OR = {
	unit_owner = scope:player
	unit_owner = { alliance_with = scope:player }
	}
    }
	is_valid = {

	NOT = { has_unit_modifier = bear_frenzy_buff }
 	
	scope:player = {
	has_variable = magic_influx
	var:magic_influx >= 3
	}
	
	custom_tooltip = {
	text = TARGET_IS_IN_RANGE_OF_CASTER_TOOLTIP
	unit_location = {
	OR = {
	is_in_area = scope:current_unit.unit_location 
	area = { any_neighbor_area = { any_area_province = { this = scope:current_unit.unit_location } } }
	}
	}
	}
	
			OR = {
			any_sub_unit = { sub_unit_type = mages }
			trigger_if = { 
				limit = { has_commander = yes } 
				scope:unit_commander = { 
					OR = {
					has_trait = cleric_trait
					#has_trait = paladin_trait
					has_trait = archmage_trait
					has_trait = mage_trait
					has_trait = warlock_trait
					has_trait = high_mage_trait
					has_trait = sorcerer_trait
					has_trait = druid_trait 
						}
					}
				}
			}
	}
	ai_is_valid = {
	always = no
	}
	effect = {
	custom_tooltip = CASTS_BUFF_BEAR_FRENZY
	
	scope:player = {
	change_variable = { name = magic_influx subtract = 3 }
	}
	
	add_unit_modifier = { name = bear_frenzy_buff duration = 912 }
    
	
   }

}
#overcast
bear_frenzy_spell_overcast = {  
	
	scope = unit
	
	saved_scopes = {
		player
		unit_commander
		current_unit
    }
	
    is_shown = { 
		OR = {
	unit_owner = scope:player
	unit_owner = { alliance_with = scope:player }
	}
    }
	is_valid = {

	NOT = { has_unit_modifier = bear_frenzy_overcast_buff }
 	
	scope:player = {
	has_variable = magic_influx
	var:magic_influx >= 12
	}
	
	custom_tooltip = {
	text = TARGET_IS_IN_RANGE_OF_CASTER_TOOLTIP
	unit_location = {
	OR = {
	is_in_area = scope:current_unit.unit_location 
	area = { any_neighbor_area = { any_area_province = { this = scope:current_unit.unit_location } } }
	}
	}
	}
	
			OR = {
			any_sub_unit = { sub_unit_type = mages }
			trigger_if = { 
				limit = { has_commander = yes } 
				scope:unit_commander = { 
					OR = {
					has_trait = cleric_trait
					#has_trait = paladin_trait
					has_trait = archmage_trait
					has_trait = mage_trait
					#has_trait = warlock_trait
					has_trait = high_mage_trait
					#has_trait = sorcerer_trait
					has_trait = druid_trait 
						}
					}
				}
			}
	}
	ai_is_valid = {
	always = no
	}
	effect = {
	custom_tooltip = CASTS_BUFF_BEAR_FRENZY_OC
	
	scope:player = {
	change_variable = { name = magic_influx subtract = 12 }
	}
	
	add_unit_modifier = { name = bear_frenzy_overcast_buff duration = 912 }
    
	
   }

}
#wolf instincts
wolf_instincts_spell = {  
	
	scope = unit
	
	saved_scopes = {
		player
		unit_commander
		current_unit
    }
	
    is_shown = { 
	OR = {
	unit_owner = scope:player
	unit_owner = { alliance_with = scope:player }
	}
    }
	is_valid = {

	NOT = { has_unit_modifier = wolf_instincts_buff }
 	
	scope:player = {
	has_variable = magic_influx
	var:magic_influx >= 3
	}
	
	custom_tooltip = {
	text = TARGET_IS_IN_RANGE_OF_CASTER_TOOLTIP
	unit_location = {
	OR = {
	is_in_area = scope:current_unit.unit_location 
	area = { any_neighbor_area = { any_area_province = { this = scope:current_unit.unit_location } } }
	}
	}
	}
	
	
			OR = {
			any_sub_unit = { sub_unit_type = mages }
			trigger_if = { 
				limit = { has_commander = yes } 
				scope:unit_commander = { 
					OR = {
					has_trait = cleric_trait
					#has_trait = paladin_trait
					has_trait = archmage_trait
					has_trait = mage_trait
					#has_trait = warlock_trait
					has_trait = high_mage_trait
					#has_trait = sorcerer_trait
					has_trait = druid_trait 
						}
					}
				}
			}
	}
	ai_is_valid = {
	always = no
	}
	effect = {
	custom_tooltip = CASTS_BUFF_WOLF_INSTINCTS
	
	scope:player = {
	change_variable = { name = magic_influx subtract = 3 }
	}
	
	add_unit_modifier = { name = wolf_instincts_buff duration = 912 }
    
	
   }

}
#overcast
wolf_instincts_spell_overcast = {  
	
	scope = unit
	
	saved_scopes = {
		player
		unit_commander
		current_unit
    }
	
    is_shown = { 
	OR = {
	unit_owner = scope:player
	unit_owner = { alliance_with = scope:player }
	}
    }
	is_valid = {

	NOT = { has_unit_modifier = wolf_instincts_overcast_buff }
 	
	scope:player = {
	has_variable = magic_influx
	var:magic_influx >= 12
	}
	
	custom_tooltip = {
	text = TARGET_IS_IN_RANGE_OF_CASTER_TOOLTIP
	unit_location = {
	OR = {
	is_in_area = scope:current_unit.unit_location 
	area = { any_neighbor_area = { any_area_province = { this = scope:current_unit.unit_location } } }
	}
	}
	}
	
			OR = {
			any_sub_unit = { sub_unit_type = mages }
			trigger_if = { 
				limit = { has_commander = yes } 
				scope:unit_commander = { 
					OR = {
					has_trait = cleric_trait
					#has_trait = paladin_trait
					has_trait = archmage_trait
					has_trait = mage_trait
					#has_trait = warlock_trait
					has_trait = high_mage_trait
					#has_trait = sorcerer_trait
					has_trait = druid_trait 
						}
					}
				}
			}
	}
	ai_is_valid = {
	always = no
	}
	effect = {
	custom_tooltip = CASTS_BUFF_WOLF_INSTINCTS_OC
	
	scope:player = {
	change_variable = { name = magic_influx subtract = 12 }
	}
	
	add_unit_modifier = { name = wolf_instincts_overcast_buff duration = 912 }
    
	
   }

}
#eagle eyes
eagle_eyes_spell = {  
	
	scope = unit
	
	saved_scopes = {
		player
		unit_commander
		current_unit
    }
	
    is_shown = { 
	OR = {
	unit_owner = scope:player
	unit_owner = { alliance_with = scope:player }
	}
    }
	is_valid = {

	NOT = { has_unit_modifier = eagle_eyes_buff }
 	
	scope:player = {
	has_variable = magic_influx
	var:magic_influx >= 3
	}
	
	
	custom_tooltip = {
	text = TARGET_IS_IN_RANGE_OF_CASTER_TOOLTIP
	unit_location = {
	OR = {
	is_in_area = scope:current_unit.unit_location 
	area = { any_neighbor_area = { any_area_province = { this = scope:current_unit.unit_location } } }
	}
	}
	}
			OR = {
			any_sub_unit = { sub_unit_type = mages }
			trigger_if = { 
				limit = { has_commander = yes } 
				scope:unit_commander = { 
					OR = {
					has_trait = cleric_trait
					#has_trait = paladin_trait
					has_trait = archmage_trait
					has_trait = mage_trait
					#has_trait = warlock_trait
					has_trait = high_mage_trait
					#has_trait = sorcerer_trait
					has_trait = druid_trait 
						}
					}
				}
			}
	}
	ai_is_valid = {
	always = no
	}
	effect = {
	custom_tooltip = CASTS_BUFF_EAGLE_EYES_BUFF
	
	scope:player = {
	change_variable = { name = magic_influx subtract = 3 }
	}
	
	add_unit_modifier = { name = eagle_eyes_buff duration = 912 }
    
	
   }

}
#overcast
eagle_eyes_spell_overcast = {  
	
	scope = unit
	
	saved_scopes = {
		player
		unit_commander
		current_unit
	}
	
    is_shown = { 
	OR = {
	unit_owner = scope:player
	unit_owner = { alliance_with = scope:player }
	}
    }
	is_valid = {

	NOT = { has_unit_modifier = eagle_eyes_overcast_buff }
 	
	scope:player = {
	has_variable = magic_influx
	var:magic_influx >= 12
	}
	

	custom_tooltip = {
	text = TARGET_IS_IN_RANGE_OF_CASTER_TOOLTIP
	unit_location = {
	OR = {
	is_in_area = scope:current_unit.unit_location 
	area = { any_neighbor_area = { any_area_province = { this = scope:current_unit.unit_location } } }
	}
	}
	}
	
			OR = {
			any_sub_unit = { sub_unit_type = mages }
			trigger_if = { 
				limit = { has_commander = yes } 
				scope:unit_commander = { 
					OR = {
					has_trait = cleric_trait
					#has_trait = paladin_trait
					has_trait = archmage_trait
					has_trait = mage_trait
					#has_trait = warlock_trait
					has_trait = high_mage_trait
					#has_trait = sorcerer_trait
					has_trait = druid_trait 
						}
					}
				}
			}
	}
	ai_is_valid = {
	always = no
	}
	effect = {
	custom_tooltip = CASTS_BUFF_EAGLE_EYES_BUFF_OC
	
	scope:player = {
	change_variable = { name = magic_influx subtract = 12 }
	}
	
	add_unit_modifier = { name = eagle_eyes_overcast_buff duration = 912 }
    
	
   }

}
#eagle eyes
stallion_pride_spell = {  
	
	scope = unit
	
	saved_scopes = {
		player
		unit_commander
		current_unit
    }
	
    is_shown = { 
	OR = {
	unit_owner = scope:player
	unit_owner = { alliance_with = scope:player }
	}
    }
	is_valid = {

	NOT = { has_unit_modifier = stallion_pride_buff }
 	
	scope:player = {
	has_variable = magic_influx
	var:magic_influx >= 3
	}
	

	custom_tooltip = {
	text = TARGET_IS_IN_RANGE_OF_CASTER_TOOLTIP
	unit_location = {
	OR = {
	is_in_area = scope:current_unit.unit_location 
	area = { any_neighbor_area = { any_area_province = { this = scope:current_unit.unit_location } } }
	}
	}
	}
	
			OR = {
			any_sub_unit = { sub_unit_type = mages }
			trigger_if = { 
				limit = { has_commander = yes } 
				scope:unit_commander = { 
					OR = {
					has_trait = cleric_trait
					#has_trait = paladin_trait
					has_trait = archmage_trait
					has_trait = mage_trait
					#has_trait = warlock_trait
					has_trait = high_mage_trait
					#has_trait = sorcerer_trait
					has_trait = druid_trait 
						}
					}
				}
			}
	}
	ai_is_valid = {
	always = no
	}
	effect = {
	custom_tooltip = CASTS_BUFF_STALION_PRIDE_BUFF
	
	scope:player = {
	change_variable = { name = magic_influx subtract = 3 }
	}
	
	add_unit_modifier = { name = stallion_pride_buff duration = 912 }
    
	
   }

}
#overcast
stallion_pride_spell_overcast = {  
	
	scope = unit
	
	saved_scopes = {
		player
		unit_commander
		current_unit
    }
	
    is_shown = { 
	
	
	OR = {
	unit_owner = scope:player
	unit_owner = { alliance_with = scope:player }
	}
	
    }
	is_valid = {

	NOT = { has_unit_modifier = stallion_pride_overcast_buff }
 	
	scope:player = {
	has_variable = magic_influx
	var:magic_influx >= 12
	}
	
	custom_tooltip = {
	text = TARGET_IS_IN_RANGE_OF_CASTER_TOOLTIP
	unit_location = {
	OR = {
	is_in_area = scope:current_unit.unit_location 
	area = { any_neighbor_area = { any_area_province = { this = scope:current_unit.unit_location } } }
	}
	}
	}
	
			OR = {
			any_sub_unit = { sub_unit_type = mages }
			trigger_if = { 
				limit = { has_commander = yes } 
				scope:unit_commander = { 
					OR = {
					has_trait = cleric_trait
					#has_trait = paladin_trait
					has_trait = archmage_trait
					has_trait = mage_trait
					#has_trait = warlock_trait
					has_trait = high_mage_trait
					#has_trait = sorcerer_trait
					has_trait = druid_trait 
						}
					}
				}
			}
	}
	ai_is_valid = {
	always = no
	}
	effect = {
	custom_tooltip = CASTS_BUFF_STALION_PRIDE_BUFF_OC
	
	scope:player = {
	change_variable = { name = magic_influx subtract = 12 }
	}
	
	add_unit_modifier = { name = stallion_pride_overcast_buff duration = 912 }
    
	
   }

}
#eagle eyes
rage_of_earth_spell = {  
	
	scope = unit
	
	saved_scopes = {
		player
		unit_commander
		current_unit
    }
	
    is_shown = { 
	always = yes
    }
	is_valid = {
	
	
	custom_tooltip = {
	text = TARGET_IS_IN_RANGE_OF_CASTER_TOOLTIP
	unit_location = {
	OR = {
	is_in_area = scope:current_unit.unit_location 
	area = { any_neighbor_area = { any_area_province = { this = scope:current_unit.unit_location } } }
	}
	}
	}
	
	

	is_moving = no
 	
	scope:player = {
	has_variable = magic_influx
	var:magic_influx >= 16
	}
	
	
			OR = {
			any_sub_unit = { sub_unit_type = mages }
			trigger_if = { 
				limit = { has_commander = yes } 
				scope:unit_commander = { 
					OR = {
					has_trait = cleric_trait
					#has_trait = paladin_trait
					has_trait = archmage_trait
					has_trait = mage_trait
					#has_trait = warlock_trait
					has_trait = high_mage_trait
					#has_trait = sorcerer_trait
					has_trait = druid_trait 
						}
					}
				}
			}
	}
	ai_is_valid = {
	always = no
	}
	effect = {
	custom_tooltip = CASTS_EARTH_RAGE_SPELL
	
	scope:player = {
	change_variable = { name = magic_influx subtract = 16 }
	}
	
	lock_unit = 30
    
	
   }

}
#lifeless soil
spell_cast_lifeless_soil_p = {  
	
	scope = province
	
	saved_scopes = {
		player
		unit_commander
		current_unit
    }
	
    is_shown = { 
	#its shown only when target is choosen its easier to avoid validator errors this way

    }
	is_valid = {
	#just for sure to not let it gone wild


	#is spell land or sea or both castable
	is_sea = no 
	
	#range of the spell cast this one is can work for all neighbor provinces and whole area
	custom_tooltip = {
	text = TARGET_IS_IN_RANGE_OF_CASTER_TOOLTIP
	OR = {
	is_in_area = scope:current_unit.unit_location
	area = { any_neighbor_area = { any_area_province = { this = scope:current_unit.unit_location } } }
	}
	}
	

	#is player able to pay the mana price?#is variable set if not something gone wrong and it has to be set again
	scope:player = {
	has_variable = magic_influx
	var:magic_influx >= 4
	}
	#who is able to cast the spell, can regular mage cast it or is it need to be casted by someone more powerfull
	scope:current_unit = {
			OR = {
			any_sub_unit = { sub_unit_type = mages }
			#this spell is so simple that it can be casted by a bunch of normal mages
			trigger_if = { 
				limit = { has_commander = yes } 
					scope:unit_commander = { 
					OR = {
					has_trait = cleric_trait
					#has_trait = paladin_trait
					has_trait = archmage_trait
					has_trait = mage_trait
					has_trait = warlock_trait #its easy spell so warlocks can cast it even if its beyond their magic specialisation
					has_trait = high_mage_trait
					has_trait = sorcerer_trait #as in warlock
					has_trait = druid_trait
						}
					} 
				}
			}
	#requirements end
	
	}
	}
	ai_is_valid = {
	#
	always = no
	#well it may need some complicated callculation i dont know weather ai will be able to determinate is target worth beeing nuked for e.g this one will be simpler though if ai has lot of spare mana it will use it too boost provinces
	
	}
	
	
	
	effect = {
	custom_tooltip = CASTS_LIFELESS_SOIL
	
	scope:player = {
	change_variable = { name = magic_influx subtract = 4 }
	}
	
	add_province_modifier = { name = lifeless_soil_debuff duration = 3650 }
     
	}
}
spell_cast_lifeless_soil = {  
	
	scope = province
	
	saved_scopes = {
		player
		unit_commander
		current_unit
    }
	
    is_shown = { 
	#its shown only when target is choosen its easier to avoid validator errors this way

    }
	is_valid = {
	#just for sure to not let it gone wild


	#is spell land or sea or both castable
	is_sea = no 
	
	#range of the spell cast this one is can work for all neighbor provinces and whole area
	custom_tooltip = {
	text = TARGET_IS_IN_RANGE_OF_CASTER_TOOLTIP
	OR = {
	is_in_area = scope:current_unit.unit_location
	area = { any_neighbor_area = { any_area_province = { this = scope:current_unit.unit_location } } }
	}
	}
	

	#is player able to pay the mana price?#is variable set if not something gone wrong and it has to be set again
	scope:player = {
	has_variable = magic_influx
	var:magic_influx >= 6
	}
	#who is able to cast the spell, can regular mage cast it or is it need to be casted by someone more powerfull
	scope:current_unit = {
			OR = {
			any_sub_unit = { sub_unit_type = mages }
			#this spell is so simple that it can be casted by a bunch of normal mages
			trigger_if = { 
				limit = { has_commander = yes } 
					scope:unit_commander = { 
					OR = {
					has_trait = cleric_trait
					#has_trait = paladin_trait
					has_trait = archmage_trait
					has_trait = mage_trait
					has_trait = warlock_trait #its easy spell so warlocks can cast it even if its beyond their magic specialisation
					has_trait = high_mage_trait
					has_trait = sorcerer_trait #as in warlock
					has_trait = druid_trait
						}
					} 
				}
			}
	#requirements end
	
	}
	}
	ai_is_valid = {
	#
	always = no
	#well it may need some complicated callculation i dont know weather ai will be able to determinate is target worth beeing nuked for e.g this one will be simpler though if ai has lot of spare mana it will use it too boost provinces
	
	}
	
	
	
	effect = {
	custom_tooltip = CASTS_LIFELESS_SOIL
	
	scope:player = {
	change_variable = { name = magic_influx subtract = 6 }
	}
	
	add_state_modifier = { name = lifeless_soil_debuff duration = 3650 }
     
	}
}
spell_cast_lifeless_soil_overcast_p = {  
	
	scope = province
	
	saved_scopes = {
		player
		unit_commander
		current_unit
    }
	
    is_shown = { 
	#its shown only when target is choosen its easier to avoid validator errors this way

    }
	is_valid = {
	#just for sure to not let it gone wild


	#is spell land or sea or both castable
	is_sea = no 
	
	#range of the spell cast this one is can work for all neighbor provinces and whole area
	custom_tooltip = {
	text = TARGET_IS_IN_RANGE_OF_CASTER_TOOLTIP
	OR = {
	is_in_area = scope:current_unit.unit_location
	area = { any_neighbor_area = { any_area_province = { this = scope:current_unit.unit_location } } }
	}
	}
	

	#is player able to pay the mana price?#is variable set if not something gone wrong and it has to be set again
	scope:player = {
	has_variable = magic_influx
	var:magic_influx >= 16
	}
	#who is able to cast the spell, can regular mage cast it or is it need to be casted by someone more powerfull
	scope:current_unit = {
			OR = {
			any_sub_unit = { sub_unit_type = mages }
			#this spell is so simple that it can be casted by a bunch of normal mages
			trigger_if = { 
				limit = { has_commander = yes } 
					scope:unit_commander = { 
					OR = {
					has_trait = cleric_trait
					#has_trait = paladin_trait
					has_trait = archmage_trait
					has_trait = mage_trait
					has_trait = warlock_trait #its easy spell so warlocks can cast it even if its beyond their magic specialisation
					has_trait = high_mage_trait
					has_trait = sorcerer_trait #as in warlock
					has_trait = druid_trait
						}
					} 
				}
			}
	#requirements end
	
	}
	}
	ai_is_valid = {
	#
	always = no
	#well it may need some complicated callculation i dont know weather ai will be able to determinate is target worth beeing nuked for e.g this one will be simpler though if ai has lot of spare mana it will use it too boost provinces
	
	}
	
	
	
	effect = {
	custom_tooltip = CASTS_LIFELESS_SOIL_OVERCAST
	
	scope:player = {
	change_variable = { name = magic_influx subtract = 16 }
	}
	
	add_province_modifier = { name = lifeless_soil_overcast_debuff duration = 3650 }
     
	}
}
spell_cast_lifeless_soil_overcast = {  
	
	scope = province
	
	saved_scopes = {
		player
		unit_commander
		current_unit
    }
	
    is_shown = { 
	#its shown only when target is choosen its easier to avoid validator errors this way

    }
	is_valid = {
	#just for sure to not let it gone wild


	#is spell land or sea or both castable
	is_sea = no 
	
	#range of the spell cast this one is can work for all neighbor provinces and whole area
	custom_tooltip = {
	text = TARGET_IS_IN_RANGE_OF_CASTER_TOOLTIP
	OR = {
	is_in_area = scope:current_unit.unit_location
	area = { any_neighbor_area = { any_area_province = { this = scope:current_unit.unit_location } } }
	}
	}
	

	#is player able to pay the mana price?#is variable set if not something gone wrong and it has to be set again
	scope:player = {
	has_variable = magic_influx
	var:magic_influx >= 24
	}
	#who is able to cast the spell, can regular mage cast it or is it need to be casted by someone more powerfull
	scope:current_unit = {
			OR = {
			any_sub_unit = { sub_unit_type = mages }
			#this spell is so simple that it can be casted by a bunch of normal mages
			trigger_if = { 
				limit = { has_commander = yes } 
					scope:unit_commander = { 
					OR = {
					has_trait = cleric_trait
					#has_trait = paladin_trait
					has_trait = archmage_trait
					has_trait = mage_trait
					has_trait = warlock_trait #its easy spell so warlocks can cast it even if its beyond their magic specialisation
					has_trait = high_mage_trait
					has_trait = sorcerer_trait #as in warlock
					has_trait = druid_trait
						}
					} 
				}
			}
	#requirements end
	
	}
	}
	ai_is_valid = {
	#
	always = no
	#well it may need some complicated callculation i dont know weather ai will be able to determinate is target worth beeing nuked for e.g this one will be simpler though if ai has lot of spare mana it will use it too boost provinces
	
	}
	
	
	
	effect = {
	custom_tooltip = CASTS_LIFELESS_SOIL_OVERCAST
	
	scope:player = {
	change_variable = { name = magic_influx subtract = 24 }
	}
	
	add_state_modifier = { name = lifeless_soil_overcast_debuff duration = 3650 }
     
	}
}

rage_of_nature_spell = {  
	
	scope = unit
	
	saved_scopes = {
		player
		unit_commander
		current_unit
    }
	
    is_shown = { 
	always = yes
    }
	is_valid = {
 	
	scope:player = {
	has_variable = magic_influx
	var:magic_influx >= 30
	}
	
	custom_tooltip = {
	text = TARGET_IS_IN_RANGE_OF_CASTER_TOOLTIP
	unit_location = {
	OR = {
	is_in_area = scope:current_unit.unit_location 
	area = { any_neighbor_area = { any_area_province = { this = scope:current_unit.unit_location } } }
	}
	}
	}
	
	
			OR = {
			any_sub_unit = { sub_unit_type = mages }
			trigger_if = { 
				limit = { has_commander = yes } 
				scope:unit_commander = { 
					OR = {
					has_trait = cleric_trait
					#has_trait = paladin_trait
					has_trait = archmage_trait
					has_trait = mage_trait
					#has_trait = warlock_trait
					has_trait = high_mage_trait
					#has_trait = sorcerer_trait
					has_trait = druid_trait 
						}
					}
				}
			}
	}
	ai_is_valid = {
	always = no
	}
	effect = {
	custom_tooltip = CASTS_EARTH_RAGE_SPELL
	
	scope:player = {
	change_variable = { name = magic_influx subtract = 30 }
	}
	
	add_unit_modifier = { name = rage_of_nature duration = 912 }
    
	
   }

}

spell_cast_gift_of_nature = {  
	
	scope = province
	
	saved_scopes = {
		player
		unit_commander
		current_unit
    }
	
    is_shown = { 
	#its shown only when target is choosen its easier to avoid validator errors this way

    }
	is_valid = {
	#just for sure to not let it gone wild


	#is spell land or sea or both castable
	is_sea = no 
	
	#range of the spell cast this one is can work for all neighbor provinces and whole area
	custom_tooltip = {
	text = TARGET_IS_IN_RANGE_OF_CASTER_TOOLTIP
	OR = {
	is_in_area = scope:current_unit.unit_location
	area = { any_neighbor_area = { any_area_province = { this = scope:current_unit.unit_location } } } 
	}
	}
	

	#is player able to pay the mana price?#is variable set if not, something gone wrong and it has to be set again
	scope:player = {
	has_variable = magic_influx
	var:magic_influx >= 20
	}
	#who is able to cast the spell, can regular mage cast it or is it need to be casted by someone more powerfull
	scope:current_unit = {
			OR = {
			any_sub_unit = { sub_unit_type = mages }
			#this spell is so simple that it can be casted by a bunch of normal mages
			trigger_if = { 
				limit = { has_commander = yes } 
					scope:unit_commander = { 
					OR = {
					has_trait = cleric_trait
					#has_trait = paladin_trait
					has_trait = archmage_trait
					has_trait = mage_trait
					has_trait = warlock_trait #its easy spell so warlocks can cast it even if its beyond their magic specialisation
					has_trait = high_mage_trait
					has_trait = sorcerer_trait #as in warlock
					has_trait = druid_trait
						}
					} 
				}
			}
	#requirements end
	
	}
	}
	ai_is_valid = {
	#
	always = no
	#well it may need some complicated callculation i dont know weather ai will be able to determinate is target worth beeing nuked for e.g this one will be simpler though if ai has lot of spare mana it will use it too boost provinces
	
	}
	
	
	
	effect = {
	custom_tooltip = CASTS_GIFT_OF_NATURE
	
	scope:player = {
	change_variable = { name = magic_influx subtract = 20 }
	}
     
	 area = { add_state_food = 500 }
	 
	 
	}
}
